buildscript {
        ext {
                springBootVersion = '2.0.3.RELEASE'
        }
        repositories {
                mavenCentral()
                maven {
                        url "https://plugins.gradle.org/m2/"
                }
        }
        dependencies {
                classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
                classpath("net.ltgt.gradle:gradle-apt-plugin:0.15")
        }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'net.ltgt.apt'

group = 'org.maxwell.springframework'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ext{
        swaggerVersion = '2.8.0'
        mapStructVersion = '1.2.0.Final'
}

repositories {
        mavenCentral()
}

dependencies {
        
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile('org.springframework.boot:spring-boot-starter-security')
        compile('org.springframework.hateoas:spring-hateoas')
        compile('org.springframework.data:spring-data-rest-hal-browser:3.0.8.RELEASE')
        compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
        compile("io.springfox:springfox-swagger2:${swaggerVersion}")
        compile("org.mapstruct:mapstruct-jdk8:${mapStructVersion}", 'org.projectlombok:lombok')
        apt("org.mapstruct:mapstruct-processor:${mapStructVersion}",'org.projectlombok:lombok')
        runtime('com.h2database:h2')
        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile("org.springframework.security:spring-security-test")
}

test {
        testLogging {
        // Show that tests are run in the command-line output
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat "short"
        // showStandardStreams = true
    }
    outputs.upToDateWhen { false }
}

//export test coverage
jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

test.finalizedBy(project.tasks.jacocoTestReport)
